local Expansion = {}
Expansion.__index = Expansion

local Constants = require('Constants')
local GameState = require('GameState')
local Tile = require('Tile')
local Utils = require('Utils')

------------------------------------------------------

-- Expansions
Expansion.LEADERS_AND_ALLIANCES = 'Leaders & Alliances'
Expansion.CHRONICLES = 'Chronicles'
Expansion.VILLAGES_AND_HAMLETS = 'Villages & Hamlets'
Expansion.MYTHS_AND_WONDERS = 'Myths & Wonders'
Expansion.GUILDS_AND_MONUMENTS = 'Guilds & Monuments'
Expansion.TREACHERY_CARD = 'Treachery Card'

Expansion.EXPANSIONS = {
    [Expansion.GUILDS_AND_MONUMENTS] = {
        name = Expansion.GUILDS_AND_MONUMENTS,
        tiles_required = {},
        setup = function()
            local expansionBag = getObjectFromGUID('9a6fe6')

            for _, object in ipairs(expansionBag.getObjects()) do
                local playerColor = Utils.getPlayerColorInTags(object.tags)

                if GameState.getPlayerState(playerColor) then
                    local board = getObjectFromGUID(Constants.PLAYER_BOARDS[playerColor].board)

                    -- Fortification flags go next to the player board
                    if Utils.contains(object.tags, Constants.FORTIFICATION) then
                        expansionBag.takeObject({
                            position = board.positionToWorld(Vector(-4.4, 0.05, -1.6)),
                            rotation = board.getRotation() + Vector(0, 90, 0),
                            guid = object.guid,
                            callback_function = function(obj)
                                obj.setLock(true)
                            end
                        })
                    -- The medallions go next to the fortification
                    elseif Utils.contains(object.tags, Constants.FAVOR_TOKEN) then
                        expansionBag.takeObject({
                            position = board.positionToWorld(Vector(-4.415, 0.5, 0.12)),
                            rotation = board.getRotation() + Vector(0, -150, 0),
                            guid = object.guid,
                        })
                    else
                        expansionBag.takeObject({
                            position = board.positionToWorld(Vector(-4.4, 0.05, 0)),
                            rotation = board.getRotation() + Vector(0, 0, 0),
                            guid = object.guid,
                            callback_function = function(obj)
                                obj.setLock(true)
                            end
                        })
                    end
                end
            end

            broadcastToAll('Use the flags to mark fortified regions.', Color.Blue)
        end
    },
    [Expansion.LEADERS_AND_ALLIANCES] = {
        name = Expansion.LEADERS_AND_ALLIANCES,
        tiles_required = {},
        setup = function()
            -- Setup the various boards
            local expansionBag = getObjectFromGUID('09c5f4')
            local boardIndex, tokenIndexes = 0, {[Constants.WHITE] = 0, [Constants.PURPLE] = 0, [Constants.ORANGE] = 0, [Constants.GREEN] = 0, [Constants.BLUE] = 0 }

            for _, object in ipairs(expansionBag.getObjects()) do
                if Utils.contains(object.tags, Constants.RAPPORT_TOKEN) then
                    -- Rapport token
                    local playerColor = Utils.getPlayerColorInTags(object.tags)

                    if GameState.getPlayerState(playerColor) then
                        local board = getObjectFromGUID(Constants.PLAYER_BOARDS[playerColor].board)

                        expansionBag.takeObject({
                            position = board.positionToWorld(Vector(-2.36 - 0.42 * tokenIndexes[playerColor], 0.5, -1.3)),
                            rotation = board.getRotation() + Vector(0, -150, 0),
                            guid = object.guid
                        })

                        tokenIndexes[playerColor] = tokenIndexes[playerColor] + 1
                    end
                else
                    -- Rapport board
                    expansionBag.takeObject({
                        position = {-19.00 + 7.60*boardIndex, 1.48, 39.10},
                        rotation = {0, 180, 0},
                        guid = object.guid,
                        callback_function = function(obj)
                            obj.setLock(true)
                        end
                    })

                    boardIndex = boardIndex + 1
                end
            end
        end
    },
    [Expansion.CHRONICLES] = {
        name = Expansion.CHRONICLES,
        enabled = false,
        tiles_required = { Tile.INN, Tile.INN_2, Tile.SHRINE, Tile.COMMAND_POST, Tile.MONASTERY, Tile.ANCIENT_TOMB, Tile.ARCANE_TOWER, Tile.GAPING_MAW, 
                            Tile.ACADEMY, Tile.CURIO_SHOPPE, Tile.MENAGERIE, Tile.FORT, Tile.LIBRARY, Tile.HOLY_SPIRE },
        setup = function()
            broadcastToAll(Expansion.CHRONICLES .. ' TODO', Color.Red)
        end
    },
    [Expansion.MYTHS_AND_WONDERS] = {
        name = Expansion.MYTHS_AND_WONDERS,
        tiles_required = {},
        setup = function(params)
            local expansionBag = getObjectFromGUID('29c738')
            local ronakRegion = nil
            local ronakPosition = Vector(-0.15, 3, -3.65)

            -- Get the center region and expansion board
            for _, object in ipairs(expansionBag.getObjects()) do
                if Utils.contains(object.tags, Constants.REGION) then
                    ronakRegion = expansionBag.takeObject({
                        position = ronakPosition, -- Not exactly the board's center so I just hard coded it, ugly I know
                        rotation = {0, 180, 0},
                        guid = object.guid
                    })
                else
                    local rotation = 0
                    if #GameState.getPlayers() >= 4 then
                        rotation = 180
                    end

                    expansionBag.takeObject({
                        position = {30.67, 1.48, 51.03},
                        rotation = {0, 180, rotation},
                        guid = object.guid
                    })
                end
            end

            -- Remove the Academy if possible, otherwise remove the Inn
            for index, tile in ipairs(params.tiles) do
                if tile == Tile.ACADEMY or (not params.useAcademy and tile == Tile.INN) then
                    table.remove(params.tiles, index)

                    if tile == Tile.ACADEMY then
                        broadcastToAll('Academy has been removed (still in Other Tiles bag), you can put it back and remove one Inn instead.', Color.Blue)
                    end
                end
            end

            -- Add black cubes around the central location
            local resourcesBag = getObjectFromGUID('16e970')
            for index = 1, 6, 1 do
                local position = Vector(ronakPosition.x, ronakPosition.y, ronakPosition.z)
                position.x = position.x + 2.65 * math.sin(2*math.pi * 60 * index/360)
                position.y = 3
                position.z = position.z + 2.65 * math.cos(2*math.pi * 60 * index/360)

                resourcesBag.takeObject({
                    position = position,
                    top = true,
                })
            end
        end
    },
    [Expansion.TREACHERY_CARD] = {
        name = Expansion.TREACHERY_CARD,
        tiles_required = {},
        setup = function(params)
            local expansionBag = getObjectFromGUID('bb9644')

            local inspirationDeck = getObjectsWithTag(Constants.INSPIRATION_DECK)[1]
            local knowledgeDeck = getObjectsWithTag(Constants.KNOWLEDGE_DECK)[1]
            local strengthDeck = getObjectsWithTag(Constants.STRENGTH_DECK)[1]
            local wisdomDeck = getObjectsWithTag(Constants.WISDOM_DECK)[1]
            local visionDeck = getObjectsWithTag(Constants.VISION_DECK)[1]
            local courageDeck = getObjectsWithTag(Constants.COURAGE_DECK)[1]
            local petDeck = getObjectsWithTag(Constants.PET_DECK)[1]
            local lootDeck = getObjectsWithTag(Constants.LOOT_DECK)[1]

            -- Go through the decks, take them out and put them in their correct deck
            for _, deck in ipairs(expansionBag.getObjects()) do
                local object = expansionBag.takeObject({
                    smooth = false,
                    guid = deck.guid
                })

                if object.hasTag(Constants.INSPIRATION_DECK) then
                    inspirationDeck.putObject(object)
                elseif object.hasTag(Constants.KNOWLEDGE_DECK) then
                    knowledgeDeck.putObject(object)
                elseif object.hasTag(Constants.STRENGTH_DECK) then
                    strengthDeck.putObject(object)
                elseif object.hasTag(Constants.WISDOM_DECK) then
                    wisdomDeck.putObject(object)
                elseif object.hasTag(Constants.VISION_DECK) then
                    visionDeck.putObject(object)
                elseif object.hasTag(Constants.COURAGE_DECK) then
                    courageDeck.putObject(object)
                elseif object.hasTag(Constants.LOOT_DECK) then
                    lootDeck.putObject(object)
                elseif object.hasTag(Constants.PET_DECK) then
                    if params.useMenagerie then
                        if petDeck then
                            petDeck.putObject(object)
                        else
                            object.setPosition({-24.26, 3, 0.88})
                            object.setRotation({0.00, 120.00, 180.00})
                        end
                    else
                        expansionBag.putObject(object)
                    end
                end
            end
        end
    },
    [Expansion.VILLAGES_AND_HAMLETS] = {
        name = Expansion.VILLAGES_AND_HAMLETS,
        enabled = false,
        tiles_required = {},
        setup = function()
            broadcastToAll(Expansion.VILLAGES_AND_HAMLETS .. ' TODO', Color.Red)
        end
    },
}

------------------------------------------------------

return Expansion