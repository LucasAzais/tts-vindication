local Module = {}
Module.__index = Module

local Constants = require('Constants')
local GameState = require('GameState')
local Tile = require('Tile')
local Utils = require('Utils')

------------------------------------------------------

Module.ODYSSEY = 'Odyssey'
Module.SACRED_STONES = 'Sacred Stones'
Module.WELL_OF_WISHES = 'Well of Wishes'
Module.TEMPLE_RUINS = 'Temple Ruins'
Module.MENAGERIE = 'Menagerie'
Module.BUILDING_SITES = 'Building Sites'
Module.JEWELCRAFTER = 'Jewelcrafter & Crystal Mine'
Module.CHRONOGATE = 'Chronogate'
Module.WHITE_RAVEN = 'White Raven'
Module.DREAMWOOD = 'The Dreamwood'
Module.MERCENARY_CAMP = 'Mercenary Camp'
Module.ELDER_TOWER = 'The Elder Tower'

-- 1 tile modules
Module.THE_OBELISK = 'The Obelisk'
Module.TRIFLES_N_TRINKETS = 'Trifles N\' Trinkets'
Module.FARM = 'Farm'
Module.SANCTUM = 'Sanctum'
Module.BAZAAR_OF_SOL = 'Bazaar of Sol'
Module.TREACHEROUS_LAIR = 'Treacherous Lair'
Module.REFORMATORY = 'Reformatory'
Module.MAUSOLEUM = 'Mausoleum'
Module.FEAR_GAUNTLET = 'Fear Gauntlet'
Module.THEATER = 'Theater'
Module.ACADEMY = 'Academy'
Module.CURIO_SHOPPE = 'Curio Shoppe'

-- Extra tiles modules
Module.EXTRA_INN = '3rd Inn'
Module.ATTRIBUTE_REGIONS = 'Attribute Regions'
Module.EXTRA_ATTRIBUTE_REGIONS = 'Extra Attribute Regions'
Module.EXTRA_SCM = 'Extra Shrine - Command - Monastery'
Module.VILLAGES_EXTRA_LOOT = 'Villages Extra Loot Cards'

-- Modules
Module.MODULES = {
    [Module.VILLAGES_EXTRA_LOOT] = {
        name = Module.VILLAGES_EXTRA_LOOT,
        tiles_required = { },
        setup = function(params)
            local bag = getObjectFromGUID('aa86e7')

            for _, object in ipairs(bag.getObjects()) do
                if Utils.contains(object.tags, Constants.LOOT_DECK) and 
                        (not Utils.contains(object.tags, Constants.TREACHERY) or params.useTreachery) then
                    
                    local deck = bag.takeObject({
                        smooth = false,
                        guid = object.guid,
                    })

                    -- Add to an existing loot deck
                    local mainLootDeck = getObjectsWithTag(Constants.LOOT_DECK)[1]
                    mainLootDeck.putObject(deck)
                end
            end
        end
    },
    [Module.ATTRIBUTE_REGIONS] = {
        name = Module.ATTRIBUTE_REGIONS,
        tiles_required = { Tile.FORT, Tile.HOLY_SPIRE, Tile.LIBRARY },
    },
    [Module.EXTRA_ATTRIBUTE_REGIONS] = {
        name = Module.EXTRA_ATTRIBUTE_REGIONS,
        tiles_required = { Tile.FORT_2, Tile.HOLY_SPIRE_2, Tile.LIBRARY_2 },
    },
    [Module.EXTRA_INN] = {
        name = Module.EXTRA_INN,
        tiles_required = { Tile.INN_3 },
    },
    [Module.EXTRA_SCM] = {
        name = Module.EXTRA_SCM,
        tiles_required = { Tile.SHRINE_2, Tile.COMMAND_POST_2, Tile.MONASTERY_2 },
    },
    [Module.ACADEMY] = {
        name = Module.ACADEMY,
        tiles_required = { Tile.ACADEMY },
    },
    [Module.MENAGERIE] = {
        name = Module.MENAGERIE,
        tiles_required = { Tile.MENAGERIE },
        setup = function()
            local bag = getObjectFromGUID('ac2b63')

            for _, object in ipairs(bag.getObjects()) do
                if Utils.contains(object.tags, Constants.PET_DECK) then
                    -- Try to find an existing pet deck
                    local existingPetDecks = getObjectsWithTag(Constants.PET_DECK)

                    local deck = bag.takeObject({
                        position = {-24.26, 2, 0.88},
                        rotation = {0, 120, 180},
                        guid = object.guid,
                    })

                    -- Add the existing pet deck
                    if #existingPetDecks > 0 then
                        for _, existingDeck in ipairs(existingPetDecks) do
                            deck.putObject(existingDeck)
                        end
                    end
                end
            end
        end
    },
    [Module.ODYSSEY] = {
        name = Module.ODYSSEY,
        tiles_required = {},
        setup = function()
            -- Pull the Odyssey board
            local bag = getObjectFromGUID('9b6225')

            -- There's only one object anyway
            for _, object in ipairs(bag.getObjects()) do
                bag.takeObject({
                    position = {0.00, 1.48, 24.27},
                    rotation = {0, 180, 0},
                    guid = object.guid,
                    callback_function = function(obj)
                        obj.setLock(true)
                    end
                })
            end

            -- Pull the pets deck
            local petsBag = getObjectFromGUID('ac2b63')

            for _, object in ipairs(petsBag.getObjects()) do
                if Utils.contains(object.tags, Constants.PET_DECK) then
                    -- Try to find an existing pet deck
                    local existingPetDecks = getObjectsWithTag(Constants.PET_DECK)

                    local deck = petsBag.takeObject({
                        position = {-24.26, 2, 0.88},
                        rotation = {0, 120, 180},
                        guid = object.guid,
                    })

                    -- Add the existing pet decks to it
                    if #existingPetDecks > 0 then
                        for _, existingDeck in ipairs(existingPetDecks) do
                            deck.putObject(existingDeck)
                        end
                    end
                end
            end

            -- Pull the loot deck (it's already on the table for now)
            local existingLootDecks = getObjectsWithTag(Constants.LOOT_DECK)

            -- Add the existing loot decks to it
            local mainLootDeck = existingLootDecks[1]
            if #existingLootDecks > 1 then
                for _, existingDeck in ipairs(existingLootDecks) do
                    if existingDeck ~= mainLootDeck then
                        mainLootDeck.putObject(existingDeck)
                    end
                end
            end

            if mainLootDeck then
                mainLootDeck.setPosition({24.26, 2, 0.88})
                mainLootDeck.setRotation({0, -120, 180})
            end
        end
    },
    [Module.JEWELCRAFTER] = {
        name = Module.JEWELCRAFTER,
        tiles_required = { Tile.JEWELCRAFTER, Tile.CRYSTAL_MINE, Tile.CRYSTAL_MINE_2 },
        setup = function()
            local bag = getObjectFromGUID('1372b5')

            for _, object in ipairs(bag.getObjects()) do
                if object.name == 'Infused Crystals' then
                    bag.takeObject({
                        position = {-17.48, 1.53, 59.39},
                        rotation = {0, 180, 180},
                        guid = object.guid,
                    })
                elseif object.name == 'Crystals' then
                    bag.takeObject({
                        position = {-23.64, 1.57, 59.31},
                        rotation = {0, 180, 0},
                        guid = object.guid,
                    })
                end
            end
        end
    },
    [Module.SACRED_STONES] = {
        name = Module.SACRED_STONES,
        tiles_required = { Tile.SACRED_STONES, Tile.SACRED_STONES_2 },
    },
    [Module.WELL_OF_WISHES] = {
        name = Module.WELL_OF_WISHES,
        tiles_required = { Tile.WELL_OF_WISHES },
        setup = function()
            local bag = getObjectFromGUID('1c560d')

            for _, object in ipairs(bag.getObjects()) do
                if object.name == 'Wish Tokens' then
                    bag.takeObject({
                        -- position = {24.86, 1.30, -3.54},
                        position = {-23.64, 1.30, 53.88},
                        rotation = {0, 0, 0},
                        guid = object.guid,
                    })
                end
            end
        end
    },
    [Module.TEMPLE_RUINS] = {
        name = Module.TEMPLE_RUINS,
        tiles_required = { Tile.TEMPLE_RUINS }
    },
    [Module.BUILDING_SITES] = {
        name = Module.BUILDING_SITES,
        tiles_required = { },
        setup = function(params)
            -- Wait until the setup is complete
            Wait.condition(function()
                -- Wait for user input on building quantity to use
                params.buildingSitesPanel:show()
                broadcastToAll('Please select the amount of building tiles to use.', Color.Blue)

                Wait.condition(function()
                    params.buildingSitesPanel:hide()

                    -- Then pull out the correct amount of region tiles at random
                    local regionBag = getObjectFromGUID(Constants.REGION_BAG)
                    for index = 1, use_building_sites, 1 do
                        regionBag.takeObject({
                            position = {14.15 + 2.3 * (index - 1), 2, -25.08 + 3.99 * (index - 1)},
                            rotation = {0.00, 120.00, 0.00},
                            top = true,
                        })
                    end

                    -- Pull out the building site tiles and add them to the region bag
                    local moduleBag = getObjectFromGUID('58f21f')

                    for index = 1, use_building_sites, 1 do
                        regionBag.putObject(moduleBag.takeObject({
                            position = {14.15 + 2.3 * (index - 1), 2, -25.08 + 3.99 * (index - 1)},
                            rotation = {0.00, 120.00, 0.00},
                            smooth = false,
                            top = true,
                        }))
                    end
                end, function()
                    return use_building_sites ~= nil
                end)
            end, function()
                return GameState.gameStartGuard(true)
            end)
        end
    },
    [Module.WHITE_RAVEN] = {
        name = Module.WHITE_RAVEN,
        tiles_required = { Tile.WHITE_RAVEN },
    },
    [Module.CHRONOGATE] = {
        name = Module.CHRONOGATE,
        tiles_required = { Tile.CHRONOGATE },
    },
    [Module.BAZAAR_OF_SOL] = {
        name = Module.BAZAAR_OF_SOL,
        tiles_required = { Tile.BAZAAR_OF_SOL },
    },
    [Module.CURIO_SHOPPE] = {
        name = Module.CURIO_SHOPPE,
        tiles_required = { Tile.CURIO_SHOPPE },
    },
    [Module.DREAMWOOD] = {
        name = Module.DREAMWOOD,
        enabled = false,
        tiles_required = {},
        setup = function()
            broadcastToAll(Module.DREAMWOOD .. ' TODO', Color.Red)
        end
    },
    [Module.ELDER_TOWER] = {
        name = Module.ELDER_TOWER,
        tiles_required = { Tile.ELDER_TOWER },
    },
    [Module.FARM] = {
        name = Module.FARM,
        tiles_required = { Tile.FARM },
    },
    [Module.FEAR_GAUNTLET] = {
        name = Module.FEAR_GAUNTLET,
        tiles_required = { Tile.FEAR_GAUNTLET },
    },
    [Module.MAUSOLEUM] = {
        name = Module.MAUSOLEUM,
        tiles_required = { Tile.MAUSOLEUM },
    },
    [Module.MERCENARY_CAMP] = {
        name = Module.MERCENARY_CAMP,
        enabled = false,
        tiles_required = { Tile.MERCENARY_CAMP },
    },
    [Module.REFORMATORY] = {
        name = Module.REFORMATORY,
        tiles_required = { Tile.REFORMATORY },
    },
    [Module.SANCTUM] = {
        name = Module.SANCTUM,
        tiles_required = { Tile.SANCTUM },
    },
    [Module.THEATER] = {
        name = Module.THEATER,
        tiles_required = { Tile.THEATER },
    },
    [Module.THE_OBELISK] = {
        name = Module.THE_OBELISK,
        tiles_required = { Tile.THE_OBELISK },
    },
    [Module.TREACHEROUS_LAIR] = {
        name = Module.TREACHEROUS_LAIR,
        tiles_required = { Tile.TREACHEROUS_LAIR },
    },
    [Module.TRIFLES_N_TRINKETS] = {
        name = Module.TRIFLES_N_TRINKETS,
        tiles_required = { Tile.TRIFLES_N_TRINKETS }
    },
}

------------------------------------------------------

return Module